/*************************************************************************
** Author : Amy Scripture
** Program : hw2, q2
** Date Created : February 23, 2024
** Date Last Modified : February 23, 2024


** Usage : No command line arguments
**
** Problem:
Accept the following information from the user (keyboard):
- Hw1, hw2 and hw3 (out of 100)
- Midterm (out of 100)
- Final exam (out of 100)
Calculate the total grade out of 100 based on the following grading scale:
Hws --> 30% (10% each)
Midterm --> 30%
Final Exam --> 40%
*************************************************************************/


#include <iostream>

using namespace std;

struct Check
{
    int checkNum;
    string checkMemo;
    float checkAmount;
};

Check operator <(Check checkAmount, Check RHS){}
Check operator <<(Check LHS, Check RHS){}

class CheckBook()
{
public:
    //constructors
    CheckBook(): balance(0), numOfChecks(0), checkBookSize(4){} //initialize pointer
    CheckBook(float initBalance): balance(initBalance), numOfChecks(0), checkBookSize(4){} //initialize pointer

    //getters and setters
    getBalance(const){return balance;}
    setBalance();

    getLastDeposit(){return lastDeposit;}
    setLastDeposit();

    getNumOfChecks(){return numOfChecks;}
    setNumOfChecks();

    getCheckBookSize(){return checkBookSize;}
    setCheckBookSize();

    //deposit fcn
    void deposit(float amount){}//adds desired amount to current balance
    bool writeCheck(Check c_amount){}
    void displayChecks(){}

    //overloaded assignment operators
    operator =(){}
    operator<<(){}

    //copy constructor
    Check(const ){}

    //destructor
    ~Check(){delete [] Check}

private:
    float balance;
    Check *chkPtr;
    float lastDeposit;
    int numOfChecks;
    int checkBookSize; //point to with chkPtr

};

void CheckBook::deposit(float amount)
{
    balance = balance + amount;
}

int main()
{
    cout << "Hello world!" << endl;
    return 0;
}
