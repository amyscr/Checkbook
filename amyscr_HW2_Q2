/*************************************************************************
** Author : Amy Scripture
** Program : hw2, q2
** Date Created : February 23, 2024
** Date Last Modified : February 23, 2024
** Usage : Digital Checkbook
**
** Problem:

Accept the following information from the user (keyboard):
- Hw1, hw2 and hw3 (out of 100)
- Midterm (out of 100)
- Final exam (out of 100)
Calculate the total grade out of 100 based on the following grading scale:
Hws --> 30% (10% each)
Midterm --> 30%
Final Exam --> 40%
*************************************************************************/


#include <iostream>
using namespace std;

struct Check
{
    int checkNum;
    string checkMemo;
    float checkAmount;
};

bool operator <(Check obj, float variable)
{
    if(obj.checkAmount<variable)
    {
        return true;
    }
}

ostream& operator <<(ostream &out, Check const &phrase)
{
    return out << phrase.checkMemo;
}

/*************************/

class CheckBook
{
public:
    //constructors
    CheckBook(): balance(0), numOfChecks(0), checkBookSize(4){} //initialize pointer
    CheckBook(float initBalance): balance(initBalance), numOfChecks(0), checkBookSize(4){} //initialize pointer

    //getters and setters
    float const getBalance (){return balance;}
    void setBalance(float amount){balance = balance + amount;}

    float const getLastDeposit(){return lastDeposit;}
    void setLastDeposit(float currentDeposit){lastDeposit = currentDeposit;}

    int const getNumOfChecks(){return numOfChecks;}
    void setNumOfChecks(){numOfChecks++;}

    int const getCheckBookSize(){return checkBookSize;}
    void setCheckBookSize(){/*double size,*/}

    //other fcns
    void deposit(float amount);//adds desired amount to current balance
    bool writeCheck(Check c_amount);
    void displayChecks();

    //overloaded assignment operators
    operator =(Check &obj){}
    operator<<(Check &obj){}

    //copy constructor
    CheckBook(const CheckBook &obj);

    //destructor
    ~Check(){delete [] Check}

private:
    float balance;
    Check *chkPtr; //array of checks, capacity is checkBookSize
    float lastDeposit;
    int numOfChecks;
    int checkBookSize;

};

/***************/
/***constructors, destructors, overloaded operators*****/
CheckBook::CheckBook(const CheckBook &obj)
{
    
}

/*****************/
/**other fncs*****/
void CheckBook::deposit(float amount)
{
    balance=balance+amount;
    lastDeposit = amount;
    return balance;
}
bool CheckBook::writeCheck(Check c_amount)
{
    if(((numOfChecks < N) && (allChecks < 10)) && (amount<=balance))
    {
        //update numofchecks and allChecks


        //add amount info to check
        checks[numOfChecks].checkAmount = amount;
        //ask
        cout<<"\nmemo?"<<endl; cin>>checks[numOfChecks].checkMemo;
        //cin.ignore();
        //getline(cin,checks[numOfChecks].checkMemo);

        //set checknum
        checks[numOfChecks].checkNum = numOfChecks;
        //update balance
        balance = balance - amount;

        numOfChecks++;
        allChecks++;
        return true;
    }
    else
    {
        //cout<<"Cannot write check for that amount. Try a lower amount next time."<<endl;
        return false;
    }
}
void CheckBook::displayChecks()
{
    for(int i=(numOfChecks-1); i>=0; i--)
    {
       //cout<<"Checks in order:";
       cout<<checks[i].checkAmount<<"   "<<checks[i].checkNum<<"   "<<checks[i].checkMemo<<endl;
    }
}
/*****************/
void checkTest()
{

}

/*********************/

int main()
{
    //initialize a checkbook obj
    void checkTest();
    return 0;
}
